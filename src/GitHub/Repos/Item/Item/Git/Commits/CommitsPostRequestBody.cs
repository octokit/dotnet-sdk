// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace GitHub.Repos.Item.Item.Git.Commits {
    #pragma warning disable CS1591
    public class CommitsPostRequestBody : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CommitsPostRequestBody_author? Author { get; set; }
#nullable restore
#else
        public CommitsPostRequestBody_author Author { get; set; }
#endif
        /// <summary>Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CommitsPostRequestBody_committer? Committer { get; set; }
#nullable restore
#else
        public CommitsPostRequestBody_committer Committer { get; set; }
#endif
        /// <summary>The commit message</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Message { get; set; }
#nullable restore
#else
        public string Message { get; set; }
#endif
        /// <summary>The full SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Parents { get; set; }
#nullable restore
#else
        public List<string> Parents { get; set; }
#endif
        /// <summary>The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Signature { get; set; }
#nullable restore
#else
        public string Signature { get; set; }
#endif
        /// <summary>The SHA of the tree object this commit points to</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Tree { get; set; }
#nullable restore
#else
        public string Tree { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="CommitsPostRequestBody"/> and sets the default values.
        /// </summary>
        public CommitsPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="CommitsPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CommitsPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CommitsPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"author", n => { Author = n.GetObjectValue<CommitsPostRequestBody_author>(CommitsPostRequestBody_author.CreateFromDiscriminatorValue); } },
                {"committer", n => { Committer = n.GetObjectValue<CommitsPostRequestBody_committer>(CommitsPostRequestBody_committer.CreateFromDiscriminatorValue); } },
                {"message", n => { Message = n.GetStringValue(); } },
                {"parents", n => { Parents = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"signature", n => { Signature = n.GetStringValue(); } },
                {"tree", n => { Tree = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<CommitsPostRequestBody_author>("author", Author);
            writer.WriteObjectValue<CommitsPostRequestBody_committer>("committer", Committer);
            writer.WriteStringValue("message", Message);
            writer.WriteCollectionOfPrimitiveValues<string>("parents", Parents);
            writer.WriteStringValue("signature", Signature);
            writer.WriteStringValue("tree", Tree);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
