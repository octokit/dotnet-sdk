// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Repos.Item.Item.Releases.GenerateNotes
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    #pragma warning disable CS1591
    public partial class GenerateNotesPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at &apos;.github/release.yml&apos; or &apos;.github/release.yaml&apos; will be used. If that is not present, the default configuration will be used.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConfigurationFilePath { get; set; }
#nullable restore
#else
        public string ConfigurationFilePath { get; set; }
#endif
        /// <summary>The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousTagName { get; set; }
#nullable restore
#else
        public string PreviousTagName { get; set; }
#endif
        /// <summary>The tag name for the release. This can be an existing tag or a new one.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TagName { get; set; }
#nullable restore
#else
        public string TagName { get; set; }
#endif
        /// <summary>Specifies the commitish value that will be the target for the release&apos;s tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TargetCommitish { get; set; }
#nullable restore
#else
        public string TargetCommitish { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Repos.Item.Item.Releases.GenerateNotes.GenerateNotesPostRequestBody"/> and sets the default values.
        /// </summary>
        public GenerateNotesPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Repos.Item.Item.Releases.GenerateNotes.GenerateNotesPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Repos.Item.Item.Releases.GenerateNotes.GenerateNotesPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Repos.Item.Item.Releases.GenerateNotes.GenerateNotesPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "configuration_file_path", n => { ConfigurationFilePath = n.GetStringValue(); } },
                { "previous_tag_name", n => { PreviousTagName = n.GetStringValue(); } },
                { "tag_name", n => { TagName = n.GetStringValue(); } },
                { "target_commitish", n => { TargetCommitish = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("configuration_file_path", ConfigurationFilePath);
            writer.WriteStringValue("previous_tag_name", PreviousTagName);
            writer.WriteStringValue("tag_name", TagName);
            writer.WriteStringValue("target_commitish", TargetCommitish);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
