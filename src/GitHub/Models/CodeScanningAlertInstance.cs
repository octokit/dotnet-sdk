// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    #pragma warning disable CS1591
    public partial class CodeScanningAlertInstance : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AnalysisKey { get; set; }
#nullable restore
#else
        public string AnalysisKey { get; set; }
#endif
        /// <summary>Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Category { get; set; }
#nullable restore
#else
        public string Category { get; set; }
#endif
        /// <summary>Classifications that have been applied to the file that triggered the alert.For example identifying it as documentation, or a generated file.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.CodeScanningAlertClassification?>? Classifications { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.CodeScanningAlertClassification?> Classifications { get; set; }
#endif
        /// <summary>The commit_sha property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CommitSha { get; set; }
#nullable restore
#else
        public string CommitSha { get; set; }
#endif
        /// <summary>Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Environment { get; set; }
#nullable restore
#else
        public string Environment { get; set; }
#endif
        /// <summary>The html_url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HtmlUrl { get; set; }
#nullable restore
#else
        public string HtmlUrl { get; set; }
#endif
        /// <summary>Describe a region within a file for the alert.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.CodeScanningAlertLocation? Location { get; set; }
#nullable restore
#else
        public global::GitHub.Models.CodeScanningAlertLocation Location { get; set; }
#endif
        /// <summary>The message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.CodeScanningAlertInstance_message? Message { get; set; }
#nullable restore
#else
        public global::GitHub.Models.CodeScanningAlertInstance_message Message { get; set; }
#endif
        /// <summary>The Git reference, formatted as `refs/pull/&lt;number&gt;/merge`, `refs/pull/&lt;number&gt;/head`,`refs/heads/&lt;branch name&gt;` or simply `&lt;branch name&gt;`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ref { get; set; }
#nullable restore
#else
        public string Ref { get; set; }
#endif
        /// <summary>State of a code scanning alert.</summary>
        public global::GitHub.Models.CodeScanningAlertState? State { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.CodeScanningAlertInstance"/> and sets the default values.
        /// </summary>
        public CodeScanningAlertInstance()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.CodeScanningAlertInstance"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.CodeScanningAlertInstance CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.CodeScanningAlertInstance();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "analysis_key", n => { AnalysisKey = n.GetStringValue(); } },
                { "category", n => { Category = n.GetStringValue(); } },
                { "classifications", n => { Classifications = n.GetCollectionOfEnumValues<global::GitHub.Models.CodeScanningAlertClassification>()?.AsList(); } },
                { "commit_sha", n => { CommitSha = n.GetStringValue(); } },
                { "environment", n => { Environment = n.GetStringValue(); } },
                { "html_url", n => { HtmlUrl = n.GetStringValue(); } },
                { "location", n => { Location = n.GetObjectValue<global::GitHub.Models.CodeScanningAlertLocation>(global::GitHub.Models.CodeScanningAlertLocation.CreateFromDiscriminatorValue); } },
                { "message", n => { Message = n.GetObjectValue<global::GitHub.Models.CodeScanningAlertInstance_message>(global::GitHub.Models.CodeScanningAlertInstance_message.CreateFromDiscriminatorValue); } },
                { "ref", n => { Ref = n.GetStringValue(); } },
                { "state", n => { State = n.GetEnumValue<global::GitHub.Models.CodeScanningAlertState>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("analysis_key", AnalysisKey);
            writer.WriteStringValue("category", Category);
            writer.WriteCollectionOfEnumValues<global::GitHub.Models.CodeScanningAlertClassification>("classifications", Classifications);
            writer.WriteStringValue("commit_sha", CommitSha);
            writer.WriteStringValue("environment", Environment);
            writer.WriteStringValue("html_url", HtmlUrl);
            writer.WriteObjectValue<global::GitHub.Models.CodeScanningAlertLocation>("location", Location);
            writer.WriteObjectValue<global::GitHub.Models.CodeScanningAlertInstance_message>("message", Message);
            writer.WriteStringValue("ref", Ref);
            writer.WriteEnumValue<global::GitHub.Models.CodeScanningAlertState>("state", State);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
