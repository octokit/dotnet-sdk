// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    #pragma warning disable CS1591
    public partial class ApiOverview_domains : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The actions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Actions { get; set; }
#nullable restore
#else
        public List<string> Actions { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The artifact_attestations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.ApiOverview_domains_artifact_attestations? ArtifactAttestations { get; set; }
#nullable restore
#else
        public global::GitHub.Models.ApiOverview_domains_artifact_attestations ArtifactAttestations { get; set; }
#endif
        /// <summary>The codespaces property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Codespaces { get; set; }
#nullable restore
#else
        public List<string> Codespaces { get; set; }
#endif
        /// <summary>The copilot property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Copilot { get; set; }
#nullable restore
#else
        public List<string> Copilot { get; set; }
#endif
        /// <summary>The packages property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Packages { get; set; }
#nullable restore
#else
        public List<string> Packages { get; set; }
#endif
        /// <summary>The website property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Website { get; set; }
#nullable restore
#else
        public List<string> Website { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.ApiOverview_domains"/> and sets the default values.
        /// </summary>
        public ApiOverview_domains()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.ApiOverview_domains"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.ApiOverview_domains CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.ApiOverview_domains();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "actions", n => { Actions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "artifact_attestations", n => { ArtifactAttestations = n.GetObjectValue<global::GitHub.Models.ApiOverview_domains_artifact_attestations>(global::GitHub.Models.ApiOverview_domains_artifact_attestations.CreateFromDiscriminatorValue); } },
                { "codespaces", n => { Codespaces = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "copilot", n => { Copilot = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "packages", n => { Packages = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "website", n => { Website = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("actions", Actions);
            writer.WriteObjectValue<global::GitHub.Models.ApiOverview_domains_artifact_attestations>("artifact_attestations", ArtifactAttestations);
            writer.WriteCollectionOfPrimitiveValues<string>("codespaces", Codespaces);
            writer.WriteCollectionOfPrimitiveValues<string>("copilot", Copilot);
            writer.WriteCollectionOfPrimitiveValues<string>("packages", Packages);
            writer.WriteCollectionOfPrimitiveValues<string>("website", Website);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
