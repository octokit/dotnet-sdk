// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    /// <summary>
    /// The breakdown of Copilot Business seats for the organization.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    public partial class CopilotSeatBreakdown : IAdditionalDataHolder, IParsable
    {
        /// <summary>The number of seats that have used Copilot during the current billing cycle.</summary>
        public int? ActiveThisCycle { get; set; }
        /// <summary>Seats added during the current billing cycle.</summary>
        public int? AddedThisCycle { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The number of seats that have not used Copilot during the current billing cycle.</summary>
        public int? InactiveThisCycle { get; set; }
        /// <summary>The number of seats that are pending cancellation at the end of the current billing cycle.</summary>
        public int? PendingCancellation { get; set; }
        /// <summary>The number of seats that have been assigned to users that have not yet accepted an invitation to this organization.</summary>
        public int? PendingInvitation { get; set; }
        /// <summary>The total number of seats being billed for the organization as of the current billing cycle.</summary>
        public int? Total { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.CopilotSeatBreakdown"/> and sets the default values.
        /// </summary>
        public CopilotSeatBreakdown()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.CopilotSeatBreakdown"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.CopilotSeatBreakdown CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.CopilotSeatBreakdown();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "active_this_cycle", n => { ActiveThisCycle = n.GetIntValue(); } },
                { "added_this_cycle", n => { AddedThisCycle = n.GetIntValue(); } },
                { "inactive_this_cycle", n => { InactiveThisCycle = n.GetIntValue(); } },
                { "pending_cancellation", n => { PendingCancellation = n.GetIntValue(); } },
                { "pending_invitation", n => { PendingInvitation = n.GetIntValue(); } },
                { "total", n => { Total = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("active_this_cycle", ActiveThisCycle);
            writer.WriteIntValue("added_this_cycle", AddedThisCycle);
            writer.WriteIntValue("inactive_this_cycle", InactiveThisCycle);
            writer.WriteIntValue("pending_cancellation", PendingCancellation);
            writer.WriteIntValue("pending_invitation", PendingInvitation);
            writer.WriteIntValue("total", Total);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
