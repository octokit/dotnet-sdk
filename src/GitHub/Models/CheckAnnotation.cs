// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    /// <summary>
    /// Check Annotation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    public partial class CheckAnnotation : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The annotation_level property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AnnotationLevel { get; set; }
#nullable restore
#else
        public string AnnotationLevel { get; set; }
#endif
        /// <summary>The blob_href property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BlobHref { get; set; }
#nullable restore
#else
        public string BlobHref { get; set; }
#endif
        /// <summary>The end_column property</summary>
        public int? EndColumn { get; set; }
        /// <summary>The end_line property</summary>
        public int? EndLine { get; set; }
        /// <summary>The message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Message { get; set; }
#nullable restore
#else
        public string Message { get; set; }
#endif
        /// <summary>The path property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Path { get; set; }
#nullable restore
#else
        public string Path { get; set; }
#endif
        /// <summary>The raw_details property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RawDetails { get; set; }
#nullable restore
#else
        public string RawDetails { get; set; }
#endif
        /// <summary>The start_column property</summary>
        public int? StartColumn { get; set; }
        /// <summary>The start_line property</summary>
        public int? StartLine { get; set; }
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.CheckAnnotation"/> and sets the default values.
        /// </summary>
        public CheckAnnotation()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.CheckAnnotation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.CheckAnnotation CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.CheckAnnotation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "annotation_level", n => { AnnotationLevel = n.GetStringValue(); } },
                { "blob_href", n => { BlobHref = n.GetStringValue(); } },
                { "end_column", n => { EndColumn = n.GetIntValue(); } },
                { "end_line", n => { EndLine = n.GetIntValue(); } },
                { "message", n => { Message = n.GetStringValue(); } },
                { "path", n => { Path = n.GetStringValue(); } },
                { "raw_details", n => { RawDetails = n.GetStringValue(); } },
                { "start_column", n => { StartColumn = n.GetIntValue(); } },
                { "start_line", n => { StartLine = n.GetIntValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("annotation_level", AnnotationLevel);
            writer.WriteStringValue("blob_href", BlobHref);
            writer.WriteIntValue("end_column", EndColumn);
            writer.WriteIntValue("end_line", EndLine);
            writer.WriteStringValue("message", Message);
            writer.WriteStringValue("path", Path);
            writer.WriteStringValue("raw_details", RawDetails);
            writer.WriteIntValue("start_column", StartColumn);
            writer.WriteIntValue("start_line", StartLine);
            writer.WriteStringValue("title", Title);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
