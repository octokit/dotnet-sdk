// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
namespace GitHub.Models
{
    /// <summary>
    /// Composed type wrapper for classes <see cref="double"/>, <see cref="string"/>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    public partial class WebhookConfigInsecureSsl : IComposedTypeWrapper, IParsable
    {
        /// <summary>Composed type representation for type <see cref="double"/></summary>
        public double? Double { get; set; }
        /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? String { get; set; }
#nullable restore
#else
        public string String { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="double"/></summary>
        public double? WebhookConfigInsecureSslDouble { get; set; }
        /// <summary>Composed type representation for type <see cref="double"/></summary>
        public double? WebhookConfigInsecureSslDouble0 { get; set; }
        /// <summary>Composed type representation for type <see cref="double"/></summary>
        public double? WebhookConfigInsecureSslDouble1 { get; set; }
        /// <summary>Composed type representation for type <see cref="double"/></summary>
        public double? WebhookConfigInsecureSslDouble2 { get; set; }
        /// <summary>Composed type representation for type <see cref="double"/></summary>
        public double? WebhookConfigInsecureSslDouble3 { get; set; }
        /// <summary>Composed type representation for type <see cref="double"/></summary>
        public double? WebhookConfigInsecureSslDouble4 { get; set; }
        /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebhookConfigInsecureSslString { get; set; }
#nullable restore
#else
        public string WebhookConfigInsecureSslString { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebhookConfigInsecureSslString0 { get; set; }
#nullable restore
#else
        public string WebhookConfigInsecureSslString0 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebhookConfigInsecureSslString1 { get; set; }
#nullable restore
#else
        public string WebhookConfigInsecureSslString1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebhookConfigInsecureSslString2 { get; set; }
#nullable restore
#else
        public string WebhookConfigInsecureSslString2 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebhookConfigInsecureSslString3 { get; set; }
#nullable restore
#else
        public string WebhookConfigInsecureSslString3 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebhookConfigInsecureSslString4 { get; set; }
#nullable restore
#else
        public string WebhookConfigInsecureSslString4 { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.WebhookConfigInsecureSsl"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.WebhookConfigInsecureSsl CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
            var result = new global::GitHub.Models.WebhookConfigInsecureSsl();
            if(parseNode.GetDoubleValue() is double doubleValue)
            {
                result.Double = doubleValue;
            }
            else if(parseNode.GetStringValue() is string stringValue)
            {
                result.String = stringValue;
            }
            else if(parseNode.GetDoubleValue() is double webhookConfigInsecureSslDoubleValue)
            {
                result.WebhookConfigInsecureSslDouble = webhookConfigInsecureSslDoubleValue;
            }
            else if(parseNode.GetDoubleValue() is double webhookConfigInsecureSslDouble0Value)
            {
                result.WebhookConfigInsecureSslDouble0 = webhookConfigInsecureSslDouble0Value;
            }
            else if(parseNode.GetDoubleValue() is double webhookConfigInsecureSslDouble1Value)
            {
                result.WebhookConfigInsecureSslDouble1 = webhookConfigInsecureSslDouble1Value;
            }
            else if(parseNode.GetDoubleValue() is double webhookConfigInsecureSslDouble2Value)
            {
                result.WebhookConfigInsecureSslDouble2 = webhookConfigInsecureSslDouble2Value;
            }
            else if(parseNode.GetDoubleValue() is double webhookConfigInsecureSslDouble3Value)
            {
                result.WebhookConfigInsecureSslDouble3 = webhookConfigInsecureSslDouble3Value;
            }
            else if(parseNode.GetDoubleValue() is double webhookConfigInsecureSslDouble4Value)
            {
                result.WebhookConfigInsecureSslDouble4 = webhookConfigInsecureSslDouble4Value;
            }
            else if(parseNode.GetStringValue() is string webhookConfigInsecureSslStringValue)
            {
                result.WebhookConfigInsecureSslString = webhookConfigInsecureSslStringValue;
            }
            else if(parseNode.GetStringValue() is string webhookConfigInsecureSslString0Value)
            {
                result.WebhookConfigInsecureSslString0 = webhookConfigInsecureSslString0Value;
            }
            else if(parseNode.GetStringValue() is string webhookConfigInsecureSslString1Value)
            {
                result.WebhookConfigInsecureSslString1 = webhookConfigInsecureSslString1Value;
            }
            else if(parseNode.GetStringValue() is string webhookConfigInsecureSslString2Value)
            {
                result.WebhookConfigInsecureSslString2 = webhookConfigInsecureSslString2Value;
            }
            else if(parseNode.GetStringValue() is string webhookConfigInsecureSslString3Value)
            {
                result.WebhookConfigInsecureSslString3 = webhookConfigInsecureSslString3Value;
            }
            else if(parseNode.GetStringValue() is string webhookConfigInsecureSslString4Value)
            {
                result.WebhookConfigInsecureSslString4 = webhookConfigInsecureSslString4Value;
            }
            return result;
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>();
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            if(Double != null)
            {
                writer.WriteDoubleValue(null, Double);
            }
            else if(String != null)
            {
                writer.WriteStringValue(null, String);
            }
            else if(WebhookConfigInsecureSslDouble != null)
            {
                writer.WriteDoubleValue(null, WebhookConfigInsecureSslDouble);
            }
            else if(WebhookConfigInsecureSslDouble0 != null)
            {
                writer.WriteDoubleValue(null, WebhookConfigInsecureSslDouble0);
            }
            else if(WebhookConfigInsecureSslDouble1 != null)
            {
                writer.WriteDoubleValue(null, WebhookConfigInsecureSslDouble1);
            }
            else if(WebhookConfigInsecureSslDouble2 != null)
            {
                writer.WriteDoubleValue(null, WebhookConfigInsecureSslDouble2);
            }
            else if(WebhookConfigInsecureSslDouble3 != null)
            {
                writer.WriteDoubleValue(null, WebhookConfigInsecureSslDouble3);
            }
            else if(WebhookConfigInsecureSslDouble4 != null)
            {
                writer.WriteDoubleValue(null, WebhookConfigInsecureSslDouble4);
            }
            else if(WebhookConfigInsecureSslString != null)
            {
                writer.WriteStringValue(null, WebhookConfigInsecureSslString);
            }
            else if(WebhookConfigInsecureSslString0 != null)
            {
                writer.WriteStringValue(null, WebhookConfigInsecureSslString0);
            }
            else if(WebhookConfigInsecureSslString1 != null)
            {
                writer.WriteStringValue(null, WebhookConfigInsecureSslString1);
            }
            else if(WebhookConfigInsecureSslString2 != null)
            {
                writer.WriteStringValue(null, WebhookConfigInsecureSslString2);
            }
            else if(WebhookConfigInsecureSslString3 != null)
            {
                writer.WriteStringValue(null, WebhookConfigInsecureSslString3);
            }
            else if(WebhookConfigInsecureSslString4 != null)
            {
                writer.WriteStringValue(null, WebhookConfigInsecureSslString4);
            }
        }
    }
}
