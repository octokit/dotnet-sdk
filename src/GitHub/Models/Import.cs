// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    /// <summary>
    /// A repository import from an external source.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    public partial class Import : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The authors_count property</summary>
        public int? AuthorsCount { get; set; }
        /// <summary>The authors_url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthorsUrl { get; set; }
#nullable restore
#else
        public string AuthorsUrl { get; set; }
#endif
        /// <summary>The commit_count property</summary>
        public int? CommitCount { get; set; }
        /// <summary>The error_message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ErrorMessage { get; set; }
#nullable restore
#else
        public string ErrorMessage { get; set; }
#endif
        /// <summary>The failed_step property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FailedStep { get; set; }
#nullable restore
#else
        public string FailedStep { get; set; }
#endif
        /// <summary>The has_large_files property</summary>
        public bool? HasLargeFiles { get; set; }
        /// <summary>The html_url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HtmlUrl { get; set; }
#nullable restore
#else
        public string HtmlUrl { get; set; }
#endif
        /// <summary>The import_percent property</summary>
        public int? ImportPercent { get; set; }
        /// <summary>The large_files_count property</summary>
        public int? LargeFilesCount { get; set; }
        /// <summary>The large_files_size property</summary>
        public int? LargeFilesSize { get; set; }
        /// <summary>The message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Message { get; set; }
#nullable restore
#else
        public string Message { get; set; }
#endif
        /// <summary>The project_choices property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.Import_project_choices>? ProjectChoices { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.Import_project_choices> ProjectChoices { get; set; }
#endif
        /// <summary>The push_percent property</summary>
        public int? PushPercent { get; set; }
        /// <summary>The repository_url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RepositoryUrl { get; set; }
#nullable restore
#else
        public string RepositoryUrl { get; set; }
#endif
        /// <summary>The status property</summary>
        public global::GitHub.Models.Import_status? Status { get; set; }
        /// <summary>The status_text property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatusText { get; set; }
#nullable restore
#else
        public string StatusText { get; set; }
#endif
        /// <summary>The svc_root property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SvcRoot { get; set; }
#nullable restore
#else
        public string SvcRoot { get; set; }
#endif
        /// <summary>The svn_root property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SvnRoot { get; set; }
#nullable restore
#else
        public string SvnRoot { get; set; }
#endif
        /// <summary>The tfvc_project property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TfvcProject { get; set; }
#nullable restore
#else
        public string TfvcProject { get; set; }
#endif
        /// <summary>The url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>The use_lfs property</summary>
        public bool? UseLfs { get; set; }
        /// <summary>The vcs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Vcs { get; set; }
#nullable restore
#else
        public string Vcs { get; set; }
#endif
        /// <summary>The URL of the originating repository.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VcsUrl { get; set; }
#nullable restore
#else
        public string VcsUrl { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.Import"/> and sets the default values.
        /// </summary>
        public Import()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.Import"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.Import CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.Import();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "authors_count", n => { AuthorsCount = n.GetIntValue(); } },
                { "authors_url", n => { AuthorsUrl = n.GetStringValue(); } },
                { "commit_count", n => { CommitCount = n.GetIntValue(); } },
                { "error_message", n => { ErrorMessage = n.GetStringValue(); } },
                { "failed_step", n => { FailedStep = n.GetStringValue(); } },
                { "has_large_files", n => { HasLargeFiles = n.GetBoolValue(); } },
                { "html_url", n => { HtmlUrl = n.GetStringValue(); } },
                { "import_percent", n => { ImportPercent = n.GetIntValue(); } },
                { "large_files_count", n => { LargeFilesCount = n.GetIntValue(); } },
                { "large_files_size", n => { LargeFilesSize = n.GetIntValue(); } },
                { "message", n => { Message = n.GetStringValue(); } },
                { "project_choices", n => { ProjectChoices = n.GetCollectionOfObjectValues<global::GitHub.Models.Import_project_choices>(global::GitHub.Models.Import_project_choices.CreateFromDiscriminatorValue)?.AsList(); } },
                { "push_percent", n => { PushPercent = n.GetIntValue(); } },
                { "repository_url", n => { RepositoryUrl = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::GitHub.Models.Import_status>(); } },
                { "status_text", n => { StatusText = n.GetStringValue(); } },
                { "svc_root", n => { SvcRoot = n.GetStringValue(); } },
                { "svn_root", n => { SvnRoot = n.GetStringValue(); } },
                { "tfvc_project", n => { TfvcProject = n.GetStringValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
                { "use_lfs", n => { UseLfs = n.GetBoolValue(); } },
                { "vcs", n => { Vcs = n.GetStringValue(); } },
                { "vcs_url", n => { VcsUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("authors_count", AuthorsCount);
            writer.WriteStringValue("authors_url", AuthorsUrl);
            writer.WriteIntValue("commit_count", CommitCount);
            writer.WriteStringValue("error_message", ErrorMessage);
            writer.WriteStringValue("failed_step", FailedStep);
            writer.WriteBoolValue("has_large_files", HasLargeFiles);
            writer.WriteStringValue("html_url", HtmlUrl);
            writer.WriteIntValue("import_percent", ImportPercent);
            writer.WriteIntValue("large_files_count", LargeFilesCount);
            writer.WriteIntValue("large_files_size", LargeFilesSize);
            writer.WriteStringValue("message", Message);
            writer.WriteCollectionOfObjectValues<global::GitHub.Models.Import_project_choices>("project_choices", ProjectChoices);
            writer.WriteIntValue("push_percent", PushPercent);
            writer.WriteStringValue("repository_url", RepositoryUrl);
            writer.WriteEnumValue<global::GitHub.Models.Import_status>("status", Status);
            writer.WriteStringValue("status_text", StatusText);
            writer.WriteStringValue("svc_root", SvcRoot);
            writer.WriteStringValue("svn_root", SvnRoot);
            writer.WriteStringValue("tfvc_project", TfvcProject);
            writer.WriteStringValue("url", Url);
            writer.WriteBoolValue("use_lfs", UseLfs);
            writer.WriteStringValue("vcs", Vcs);
            writer.WriteStringValue("vcs_url", VcsUrl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
