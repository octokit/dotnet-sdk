// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    /// <summary>
    /// A check performed on the code of a given code change
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    public partial class CheckRun : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.NullableIntegration? App { get; set; }
#nullable restore
#else
        public global::GitHub.Models.NullableIntegration App { get; set; }
#endif
        /// <summary>The check_suite property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.CheckRun_check_suite? CheckSuite { get; set; }
#nullable restore
#else
        public global::GitHub.Models.CheckRun_check_suite CheckSuite { get; set; }
#endif
        /// <summary>The completed_at property</summary>
        public DateTimeOffset? CompletedAt { get; set; }
        /// <summary>The conclusion property</summary>
        public global::GitHub.Models.CheckRun_conclusion? Conclusion { get; set; }
        /// <summary>A deployment created as the result of an Actions check run from a workflow that references an environment</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.DeploymentSimple? Deployment { get; set; }
#nullable restore
#else
        public global::GitHub.Models.DeploymentSimple Deployment { get; set; }
#endif
        /// <summary>The details_url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DetailsUrl { get; set; }
#nullable restore
#else
        public string DetailsUrl { get; set; }
#endif
        /// <summary>The external_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalId { get; set; }
#nullable restore
#else
        public string ExternalId { get; set; }
#endif
        /// <summary>The SHA of the commit that is being checked.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HeadSha { get; set; }
#nullable restore
#else
        public string HeadSha { get; set; }
#endif
        /// <summary>The html_url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HtmlUrl { get; set; }
#nullable restore
#else
        public string HtmlUrl { get; set; }
#endif
        /// <summary>The id of the check.</summary>
        public long? Id { get; set; }
        /// <summary>The name of the check.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The node_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NodeId { get; set; }
#nullable restore
#else
        public string NodeId { get; set; }
#endif
        /// <summary>The output property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.CheckRun_output? Output { get; set; }
#nullable restore
#else
        public global::GitHub.Models.CheckRun_output Output { get; set; }
#endif
        /// <summary>Pull requests that are open with a `head_sha` or `head_branch` that matches the check. The returned pull requests do not necessarily indicate pull requests that triggered the check.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.PullRequestMinimal>? PullRequests { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.PullRequestMinimal> PullRequests { get; set; }
#endif
        /// <summary>The started_at property</summary>
        public DateTimeOffset? StartedAt { get; set; }
        /// <summary>The phase of the lifecycle that the check is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check runs.</summary>
        public global::GitHub.Models.CheckRun_status? Status { get; set; }
        /// <summary>The url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.CheckRun"/> and sets the default values.
        /// </summary>
        public CheckRun()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.CheckRun"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.CheckRun CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.CheckRun();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "app", n => { App = n.GetObjectValue<global::GitHub.Models.NullableIntegration>(global::GitHub.Models.NullableIntegration.CreateFromDiscriminatorValue); } },
                { "check_suite", n => { CheckSuite = n.GetObjectValue<global::GitHub.Models.CheckRun_check_suite>(global::GitHub.Models.CheckRun_check_suite.CreateFromDiscriminatorValue); } },
                { "completed_at", n => { CompletedAt = n.GetDateTimeOffsetValue(); } },
                { "conclusion", n => { Conclusion = n.GetEnumValue<global::GitHub.Models.CheckRun_conclusion>(); } },
                { "deployment", n => { Deployment = n.GetObjectValue<global::GitHub.Models.DeploymentSimple>(global::GitHub.Models.DeploymentSimple.CreateFromDiscriminatorValue); } },
                { "details_url", n => { DetailsUrl = n.GetStringValue(); } },
                { "external_id", n => { ExternalId = n.GetStringValue(); } },
                { "head_sha", n => { HeadSha = n.GetStringValue(); } },
                { "html_url", n => { HtmlUrl = n.GetStringValue(); } },
                { "id", n => { Id = n.GetLongValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "node_id", n => { NodeId = n.GetStringValue(); } },
                { "output", n => { Output = n.GetObjectValue<global::GitHub.Models.CheckRun_output>(global::GitHub.Models.CheckRun_output.CreateFromDiscriminatorValue); } },
                { "pull_requests", n => { PullRequests = n.GetCollectionOfObjectValues<global::GitHub.Models.PullRequestMinimal>(global::GitHub.Models.PullRequestMinimal.CreateFromDiscriminatorValue)?.AsList(); } },
                { "started_at", n => { StartedAt = n.GetDateTimeOffsetValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::GitHub.Models.CheckRun_status>(); } },
                { "url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::GitHub.Models.NullableIntegration>("app", App);
            writer.WriteObjectValue<global::GitHub.Models.CheckRun_check_suite>("check_suite", CheckSuite);
            writer.WriteDateTimeOffsetValue("completed_at", CompletedAt);
            writer.WriteEnumValue<global::GitHub.Models.CheckRun_conclusion>("conclusion", Conclusion);
            writer.WriteObjectValue<global::GitHub.Models.DeploymentSimple>("deployment", Deployment);
            writer.WriteStringValue("details_url", DetailsUrl);
            writer.WriteStringValue("external_id", ExternalId);
            writer.WriteStringValue("head_sha", HeadSha);
            writer.WriteStringValue("html_url", HtmlUrl);
            writer.WriteLongValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("node_id", NodeId);
            writer.WriteObjectValue<global::GitHub.Models.CheckRun_output>("output", Output);
            writer.WriteCollectionOfObjectValues<global::GitHub.Models.PullRequestMinimal>("pull_requests", PullRequests);
            writer.WriteDateTimeOffsetValue("started_at", StartedAt);
            writer.WriteEnumValue<global::GitHub.Models.CheckRun_status>("status", Status);
            writer.WriteStringValue("url", Url);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
