// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    /// <summary>
    /// Topic Search Result Item
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    public partial class TopicSearchResultItem : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The aliases property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.TopicSearchResultItem_aliases>? Aliases { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.TopicSearchResultItem_aliases> Aliases { get; set; }
#endif
        /// <summary>The created_at property</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The created_by property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedBy { get; set; }
#nullable restore
#else
        public string CreatedBy { get; set; }
#endif
        /// <summary>The curated property</summary>
        public bool? Curated { get; set; }
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The display_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The featured property</summary>
        public bool? Featured { get; set; }
        /// <summary>The logo_url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogoUrl { get; set; }
#nullable restore
#else
        public string LogoUrl { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The related property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.TopicSearchResultItem_related>? Related { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.TopicSearchResultItem_related> Related { get; set; }
#endif
        /// <summary>The released property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Released { get; set; }
#nullable restore
#else
        public string Released { get; set; }
#endif
        /// <summary>The repository_count property</summary>
        public int? RepositoryCount { get; set; }
        /// <summary>The score property</summary>
        public double? Score { get; set; }
        /// <summary>The short_description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ShortDescription { get; set; }
#nullable restore
#else
        public string ShortDescription { get; set; }
#endif
        /// <summary>The text_matches property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.Topics>? TextMatches { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.Topics> TextMatches { get; set; }
#endif
        /// <summary>The updated_at property</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.TopicSearchResultItem"/> and sets the default values.
        /// </summary>
        public TopicSearchResultItem()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.TopicSearchResultItem"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.TopicSearchResultItem CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.TopicSearchResultItem();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "aliases", n => { Aliases = n.GetCollectionOfObjectValues<global::GitHub.Models.TopicSearchResultItem_aliases>(global::GitHub.Models.TopicSearchResultItem_aliases.CreateFromDiscriminatorValue)?.AsList(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "created_by", n => { CreatedBy = n.GetStringValue(); } },
                { "curated", n => { Curated = n.GetBoolValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "display_name", n => { DisplayName = n.GetStringValue(); } },
                { "featured", n => { Featured = n.GetBoolValue(); } },
                { "logo_url", n => { LogoUrl = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "related", n => { Related = n.GetCollectionOfObjectValues<global::GitHub.Models.TopicSearchResultItem_related>(global::GitHub.Models.TopicSearchResultItem_related.CreateFromDiscriminatorValue)?.AsList(); } },
                { "released", n => { Released = n.GetStringValue(); } },
                { "repository_count", n => { RepositoryCount = n.GetIntValue(); } },
                { "score", n => { Score = n.GetDoubleValue(); } },
                { "short_description", n => { ShortDescription = n.GetStringValue(); } },
                { "text_matches", n => { TextMatches = n.GetCollectionOfObjectValues<global::GitHub.Models.Topics>(global::GitHub.Models.Topics.CreateFromDiscriminatorValue)?.AsList(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::GitHub.Models.TopicSearchResultItem_aliases>("aliases", Aliases);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteStringValue("created_by", CreatedBy);
            writer.WriteBoolValue("curated", Curated);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("display_name", DisplayName);
            writer.WriteBoolValue("featured", Featured);
            writer.WriteStringValue("logo_url", LogoUrl);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfObjectValues<global::GitHub.Models.TopicSearchResultItem_related>("related", Related);
            writer.WriteStringValue("released", Released);
            writer.WriteIntValue("repository_count", RepositoryCount);
            writer.WriteDoubleValue("score", Score);
            writer.WriteStringValue("short_description", ShortDescription);
            writer.WriteCollectionOfObjectValues<global::GitHub.Models.Topics>("text_matches", TextMatches);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
