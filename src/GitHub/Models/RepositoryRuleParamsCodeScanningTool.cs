// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    /// <summary>
    /// A tool that must provide code scanning results for this rule to pass.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class RepositoryRuleParamsCodeScanningTool : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see &quot;[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).&quot;</summary>
        public global::GitHub.Models.RepositoryRuleParamsCodeScanningTool_alerts_threshold? AlertsThreshold { get; set; }
        /// <summary>The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see &quot;[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).&quot;</summary>
        public global::GitHub.Models.RepositoryRuleParamsCodeScanningTool_security_alerts_threshold? SecurityAlertsThreshold { get; set; }
        /// <summary>The name of a code scanning tool</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Tool { get; set; }
#nullable restore
#else
        public string Tool { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.RepositoryRuleParamsCodeScanningTool"/> and sets the default values.
        /// </summary>
        public RepositoryRuleParamsCodeScanningTool()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.RepositoryRuleParamsCodeScanningTool"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.RepositoryRuleParamsCodeScanningTool CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.RepositoryRuleParamsCodeScanningTool();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "alerts_threshold", n => { AlertsThreshold = n.GetEnumValue<global::GitHub.Models.RepositoryRuleParamsCodeScanningTool_alerts_threshold>(); } },
                { "security_alerts_threshold", n => { SecurityAlertsThreshold = n.GetEnumValue<global::GitHub.Models.RepositoryRuleParamsCodeScanningTool_security_alerts_threshold>(); } },
                { "tool", n => { Tool = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::GitHub.Models.RepositoryRuleParamsCodeScanningTool_alerts_threshold>("alerts_threshold", AlertsThreshold);
            writer.WriteEnumValue<global::GitHub.Models.RepositoryRuleParamsCodeScanningTool_security_alerts_threshold>("security_alerts_threshold", SecurityAlertsThreshold);
            writer.WriteStringValue("tool", Tool);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
