// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    /// <summary>
    /// List of custom property values for a repository
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    public partial class OrgRepoCustomPropertyValues : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>List of custom property names and associated values</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.CustomPropertyValue>? Properties { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.CustomPropertyValue> Properties { get; set; }
#endif
        /// <summary>The repository_full_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RepositoryFullName { get; set; }
#nullable restore
#else
        public string RepositoryFullName { get; set; }
#endif
        /// <summary>The repository_id property</summary>
        public int? RepositoryId { get; set; }
        /// <summary>The repository_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RepositoryName { get; set; }
#nullable restore
#else
        public string RepositoryName { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.OrgRepoCustomPropertyValues"/> and sets the default values.
        /// </summary>
        public OrgRepoCustomPropertyValues()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.OrgRepoCustomPropertyValues"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.OrgRepoCustomPropertyValues CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.OrgRepoCustomPropertyValues();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "properties", n => { Properties = n.GetCollectionOfObjectValues<global::GitHub.Models.CustomPropertyValue>(global::GitHub.Models.CustomPropertyValue.CreateFromDiscriminatorValue)?.AsList(); } },
                { "repository_full_name", n => { RepositoryFullName = n.GetStringValue(); } },
                { "repository_id", n => { RepositoryId = n.GetIntValue(); } },
                { "repository_name", n => { RepositoryName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::GitHub.Models.CustomPropertyValue>("properties", Properties);
            writer.WriteStringValue("repository_full_name", RepositoryFullName);
            writer.WriteIntValue("repository_id", RepositoryId);
            writer.WriteStringValue("repository_name", RepositoryName);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
