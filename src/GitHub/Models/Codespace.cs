// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    /// <summary>
    /// A codespace.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    public partial class Codespace : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A GitHub user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.SimpleUser? BillableOwner { get; set; }
#nullable restore
#else
        public global::GitHub.Models.SimpleUser BillableOwner { get; set; }
#endif
        /// <summary>The created_at property</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>Path to devcontainer.json from repo root used to create Codespace.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DevcontainerPath { get; set; }
#nullable restore
#else
        public string DevcontainerPath { get; set; }
#endif
        /// <summary>Display name for this codespace.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>UUID identifying this codespace&apos;s environment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EnvironmentId { get; set; }
#nullable restore
#else
        public string EnvironmentId { get; set; }
#endif
        /// <summary>Details about the codespace&apos;s git repository.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.Codespace_git_status? GitStatus { get; set; }
#nullable restore
#else
        public global::GitHub.Models.Codespace_git_status GitStatus { get; set; }
#endif
        /// <summary>The id property</summary>
        public long? Id { get; set; }
        /// <summary>The number of minutes of inactivity after which this codespace will be automatically stopped.</summary>
        public int? IdleTimeoutMinutes { get; set; }
        /// <summary>Text to show user when codespace idle timeout minutes has been overriden by an organization policy</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IdleTimeoutNotice { get; set; }
#nullable restore
#else
        public string IdleTimeoutNotice { get; set; }
#endif
        /// <summary>The text to display to a user when a codespace has been stopped for a potentially actionable reason.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastKnownStopNotice { get; set; }
#nullable restore
#else
        public string LastKnownStopNotice { get; set; }
#endif
        /// <summary>Last known time this codespace was started.</summary>
        public DateTimeOffset? LastUsedAt { get; set; }
        /// <summary>The initally assigned location of a new codespace.</summary>
        public global::GitHub.Models.Codespace_location? Location { get; set; }
        /// <summary>A description of the machine powering a codespace.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.NullableCodespaceMachine? Machine { get; set; }
#nullable restore
#else
        public global::GitHub.Models.NullableCodespaceMachine Machine { get; set; }
#endif
        /// <summary>API URL to access available alternate machine types for this codespace.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MachinesUrl { get; set; }
#nullable restore
#else
        public string MachinesUrl { get; set; }
#endif
        /// <summary>Automatically generated name of this codespace.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>A GitHub user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.SimpleUser? Owner { get; set; }
#nullable restore
#else
        public global::GitHub.Models.SimpleUser Owner { get; set; }
#endif
        /// <summary>Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.</summary>
        public bool? PendingOperation { get; set; }
        /// <summary>Text to show user when codespace is disabled by a pending operation</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PendingOperationDisabledReason { get; set; }
#nullable restore
#else
        public string PendingOperationDisabledReason { get; set; }
#endif
        /// <summary>Whether the codespace was created from a prebuild.</summary>
        public bool? Prebuild { get; set; }
        /// <summary>API URL to publish this codespace to a new repository.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PublishUrl { get; set; }
#nullable restore
#else
        public string PublishUrl { get; set; }
#endif
        /// <summary>API URL for the Pull Request associated with this codespace, if any.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PullsUrl { get; set; }
#nullable restore
#else
        public string PullsUrl { get; set; }
#endif
        /// <summary>The recent_folders property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? RecentFolders { get; set; }
#nullable restore
#else
        public List<string> RecentFolders { get; set; }
#endif
        /// <summary>Minimal Repository</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.MinimalRepository? Repository { get; set; }
#nullable restore
#else
        public global::GitHub.Models.MinimalRepository Repository { get; set; }
#endif
        /// <summary>When a codespace will be auto-deleted based on the &quot;retention_period_minutes&quot; and &quot;last_used_at&quot;</summary>
        public DateTimeOffset? RetentionExpiresAt { get; set; }
        /// <summary>Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).</summary>
        public int? RetentionPeriodMinutes { get; set; }
        /// <summary>The runtime_constraints property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.Codespace_runtime_constraints? RuntimeConstraints { get; set; }
#nullable restore
#else
        public global::GitHub.Models.Codespace_runtime_constraints RuntimeConstraints { get; set; }
#endif
        /// <summary>API URL to start this codespace.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartUrl { get; set; }
#nullable restore
#else
        public string StartUrl { get; set; }
#endif
        /// <summary>State of this codespace.</summary>
        public global::GitHub.Models.Codespace_state? State { get; set; }
        /// <summary>API URL to stop this codespace.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StopUrl { get; set; }
#nullable restore
#else
        public string StopUrl { get; set; }
#endif
        /// <summary>The updated_at property</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>API URL for this codespace.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>URL to access this codespace on the web.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebUrl { get; set; }
#nullable restore
#else
        public string WebUrl { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.Codespace"/> and sets the default values.
        /// </summary>
        public Codespace()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.Codespace"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.Codespace CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.Codespace();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "billable_owner", n => { BillableOwner = n.GetObjectValue<global::GitHub.Models.SimpleUser>(global::GitHub.Models.SimpleUser.CreateFromDiscriminatorValue); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "devcontainer_path", n => { DevcontainerPath = n.GetStringValue(); } },
                { "display_name", n => { DisplayName = n.GetStringValue(); } },
                { "environment_id", n => { EnvironmentId = n.GetStringValue(); } },
                { "git_status", n => { GitStatus = n.GetObjectValue<global::GitHub.Models.Codespace_git_status>(global::GitHub.Models.Codespace_git_status.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetLongValue(); } },
                { "idle_timeout_minutes", n => { IdleTimeoutMinutes = n.GetIntValue(); } },
                { "idle_timeout_notice", n => { IdleTimeoutNotice = n.GetStringValue(); } },
                { "last_known_stop_notice", n => { LastKnownStopNotice = n.GetStringValue(); } },
                { "last_used_at", n => { LastUsedAt = n.GetDateTimeOffsetValue(); } },
                { "location", n => { Location = n.GetEnumValue<global::GitHub.Models.Codespace_location>(); } },
                { "machine", n => { Machine = n.GetObjectValue<global::GitHub.Models.NullableCodespaceMachine>(global::GitHub.Models.NullableCodespaceMachine.CreateFromDiscriminatorValue); } },
                { "machines_url", n => { MachinesUrl = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "owner", n => { Owner = n.GetObjectValue<global::GitHub.Models.SimpleUser>(global::GitHub.Models.SimpleUser.CreateFromDiscriminatorValue); } },
                { "pending_operation", n => { PendingOperation = n.GetBoolValue(); } },
                { "pending_operation_disabled_reason", n => { PendingOperationDisabledReason = n.GetStringValue(); } },
                { "prebuild", n => { Prebuild = n.GetBoolValue(); } },
                { "publish_url", n => { PublishUrl = n.GetStringValue(); } },
                { "pulls_url", n => { PullsUrl = n.GetStringValue(); } },
                { "recent_folders", n => { RecentFolders = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "repository", n => { Repository = n.GetObjectValue<global::GitHub.Models.MinimalRepository>(global::GitHub.Models.MinimalRepository.CreateFromDiscriminatorValue); } },
                { "retention_expires_at", n => { RetentionExpiresAt = n.GetDateTimeOffsetValue(); } },
                { "retention_period_minutes", n => { RetentionPeriodMinutes = n.GetIntValue(); } },
                { "runtime_constraints", n => { RuntimeConstraints = n.GetObjectValue<global::GitHub.Models.Codespace_runtime_constraints>(global::GitHub.Models.Codespace_runtime_constraints.CreateFromDiscriminatorValue); } },
                { "start_url", n => { StartUrl = n.GetStringValue(); } },
                { "state", n => { State = n.GetEnumValue<global::GitHub.Models.Codespace_state>(); } },
                { "stop_url", n => { StopUrl = n.GetStringValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
                { "web_url", n => { WebUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::GitHub.Models.SimpleUser>("billable_owner", BillableOwner);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteStringValue("devcontainer_path", DevcontainerPath);
            writer.WriteStringValue("display_name", DisplayName);
            writer.WriteStringValue("environment_id", EnvironmentId);
            writer.WriteObjectValue<global::GitHub.Models.Codespace_git_status>("git_status", GitStatus);
            writer.WriteLongValue("id", Id);
            writer.WriteIntValue("idle_timeout_minutes", IdleTimeoutMinutes);
            writer.WriteStringValue("idle_timeout_notice", IdleTimeoutNotice);
            writer.WriteStringValue("last_known_stop_notice", LastKnownStopNotice);
            writer.WriteDateTimeOffsetValue("last_used_at", LastUsedAt);
            writer.WriteEnumValue<global::GitHub.Models.Codespace_location>("location", Location);
            writer.WriteObjectValue<global::GitHub.Models.NullableCodespaceMachine>("machine", Machine);
            writer.WriteStringValue("machines_url", MachinesUrl);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<global::GitHub.Models.SimpleUser>("owner", Owner);
            writer.WriteBoolValue("pending_operation", PendingOperation);
            writer.WriteStringValue("pending_operation_disabled_reason", PendingOperationDisabledReason);
            writer.WriteBoolValue("prebuild", Prebuild);
            writer.WriteStringValue("publish_url", PublishUrl);
            writer.WriteStringValue("pulls_url", PullsUrl);
            writer.WriteCollectionOfPrimitiveValues<string>("recent_folders", RecentFolders);
            writer.WriteObjectValue<global::GitHub.Models.MinimalRepository>("repository", Repository);
            writer.WriteDateTimeOffsetValue("retention_expires_at", RetentionExpiresAt);
            writer.WriteIntValue("retention_period_minutes", RetentionPeriodMinutes);
            writer.WriteObjectValue<global::GitHub.Models.Codespace_runtime_constraints>("runtime_constraints", RuntimeConstraints);
            writer.WriteStringValue("start_url", StartUrl);
            writer.WriteEnumValue<global::GitHub.Models.Codespace_state>("state", State);
            writer.WriteStringValue("stop_url", StopUrl);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteStringValue("url", Url);
            writer.WriteStringValue("web_url", WebUrl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
