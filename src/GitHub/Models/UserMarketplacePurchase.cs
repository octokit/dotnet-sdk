// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    /// <summary>
    /// User Marketplace Purchase
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class UserMarketplacePurchase : IAdditionalDataHolder, IParsable
    {
        /// <summary>The account property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.MarketplaceAccount? Account { get; set; }
#nullable restore
#else
        public global::GitHub.Models.MarketplaceAccount Account { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The billing_cycle property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BillingCycle { get; set; }
#nullable restore
#else
        public string BillingCycle { get; set; }
#endif
        /// <summary>The free_trial_ends_on property</summary>
        public DateTimeOffset? FreeTrialEndsOn { get; set; }
        /// <summary>The next_billing_date property</summary>
        public DateTimeOffset? NextBillingDate { get; set; }
        /// <summary>The on_free_trial property</summary>
        public bool? OnFreeTrial { get; set; }
        /// <summary>Marketplace Listing Plan</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.MarketplaceListingPlan? Plan { get; set; }
#nullable restore
#else
        public global::GitHub.Models.MarketplaceListingPlan Plan { get; set; }
#endif
        /// <summary>The unit_count property</summary>
        public int? UnitCount { get; set; }
        /// <summary>The updated_at property</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.UserMarketplacePurchase"/> and sets the default values.
        /// </summary>
        public UserMarketplacePurchase()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.UserMarketplacePurchase"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.UserMarketplacePurchase CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.UserMarketplacePurchase();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account", n => { Account = n.GetObjectValue<global::GitHub.Models.MarketplaceAccount>(global::GitHub.Models.MarketplaceAccount.CreateFromDiscriminatorValue); } },
                { "billing_cycle", n => { BillingCycle = n.GetStringValue(); } },
                { "free_trial_ends_on", n => { FreeTrialEndsOn = n.GetDateTimeOffsetValue(); } },
                { "next_billing_date", n => { NextBillingDate = n.GetDateTimeOffsetValue(); } },
                { "on_free_trial", n => { OnFreeTrial = n.GetBoolValue(); } },
                { "plan", n => { Plan = n.GetObjectValue<global::GitHub.Models.MarketplaceListingPlan>(global::GitHub.Models.MarketplaceListingPlan.CreateFromDiscriminatorValue); } },
                { "unit_count", n => { UnitCount = n.GetIntValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::GitHub.Models.MarketplaceAccount>("account", Account);
            writer.WriteStringValue("billing_cycle", BillingCycle);
            writer.WriteDateTimeOffsetValue("free_trial_ends_on", FreeTrialEndsOn);
            writer.WriteDateTimeOffsetValue("next_billing_date", NextBillingDate);
            writer.WriteBoolValue("on_free_trial", OnFreeTrial);
            writer.WriteObjectValue<global::GitHub.Models.MarketplaceListingPlan>("plan", Plan);
            writer.WriteIntValue("unit_count", UnitCount);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
