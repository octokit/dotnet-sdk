// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    /// <summary>
    /// Custom property defined on an organization
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class CustomProperty : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>An ordered list of the allowed values of the property.The property can have up to 200 allowed values.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AllowedValues { get; set; }
#nullable restore
#else
        public List<string> AllowedValues { get; set; }
#endif
        /// <summary>Default value of the property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.CustomProperty.CustomProperty_default_value? DefaultValue { get; set; }
#nullable restore
#else
        public global::GitHub.Models.CustomProperty.CustomProperty_default_value DefaultValue { get; set; }
#endif
        /// <summary>Short description of the property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The name of the property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PropertyName { get; set; }
#nullable restore
#else
        public string PropertyName { get; set; }
#endif
        /// <summary>Whether the property is required.</summary>
        public bool? Required { get; set; }
        /// <summary>The URL that can be used to fetch, update, or delete info about this property via the API.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>Who can edit the values of the property</summary>
        public global::GitHub.Models.CustomProperty_values_editable_by? ValuesEditableBy { get; set; }
        /// <summary>The type of the value for the property</summary>
        public global::GitHub.Models.CustomProperty_value_type? ValueType { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.CustomProperty"/> and sets the default values.
        /// </summary>
        public CustomProperty()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.CustomProperty"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.CustomProperty CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.CustomProperty();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allowed_values", n => { AllowedValues = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "default_value", n => { DefaultValue = n.GetObjectValue<global::GitHub.Models.CustomProperty.CustomProperty_default_value>(global::GitHub.Models.CustomProperty.CustomProperty_default_value.CreateFromDiscriminatorValue); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "property_name", n => { PropertyName = n.GetStringValue(); } },
                { "required", n => { Required = n.GetBoolValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
                { "value_type", n => { ValueType = n.GetEnumValue<global::GitHub.Models.CustomProperty_value_type>(); } },
                { "values_editable_by", n => { ValuesEditableBy = n.GetEnumValue<global::GitHub.Models.CustomProperty_values_editable_by>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("allowed_values", AllowedValues);
            writer.WriteObjectValue<global::GitHub.Models.CustomProperty.CustomProperty_default_value>("default_value", DefaultValue);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("property_name", PropertyName);
            writer.WriteBoolValue("required", Required);
            writer.WriteStringValue("url", Url);
            writer.WriteEnumValue<global::GitHub.Models.CustomProperty_values_editable_by>("values_editable_by", ValuesEditableBy);
            writer.WriteEnumValue<global::GitHub.Models.CustomProperty_value_type>("value_type", ValueType);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="string"/>, List&lt;string&gt;
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class CustomProperty_default_value : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? CustomPropertyDefaultValueString { get; set; }
#nullable restore
#else
            public string CustomPropertyDefaultValueString { get; set; }
#endif
            /// <summary>Composed type representation for type List&lt;string&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public List<string>? String { get; set; }
#nullable restore
#else
            public List<string> String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::GitHub.Models.CustomProperty.CustomProperty_default_value"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::GitHub.Models.CustomProperty.CustomProperty_default_value CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::GitHub.Models.CustomProperty.CustomProperty_default_value();
                if(parseNode.GetStringValue() is string customPropertyDefaultValueStringValue)
                {
                    result.CustomPropertyDefaultValueString = customPropertyDefaultValueStringValue;
                }
                else if(parseNode.GetCollectionOfPrimitiveValues<string>()?.AsList() is List<string> stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(CustomPropertyDefaultValueString != null)
                {
                    writer.WriteStringValue(null, CustomPropertyDefaultValueString);
                }
                else if(String != null)
                {
                    writer.WriteCollectionOfPrimitiveValues<string>(null, String);
                }
            }
        }
    }
}
#pragma warning restore CS0618
