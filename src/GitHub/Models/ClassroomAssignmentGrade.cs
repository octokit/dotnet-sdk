// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    /// <summary>
    /// Grade for a student or groups GitHub Classroom assignment
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    public partial class ClassroomAssignmentGrade : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Name of the assignment</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AssignmentName { get; set; }
#nullable restore
#else
        public string AssignmentName { get; set; }
#endif
        /// <summary>URL of the assignment</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AssignmentUrl { get; set; }
#nullable restore
#else
        public string AssignmentUrl { get; set; }
#endif
        /// <summary>GitHub username of the student</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GithubUsername { get; set; }
#nullable restore
#else
        public string GithubUsername { get; set; }
#endif
        /// <summary>If a group assignment, name of the group the student is in</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GroupName { get; set; }
#nullable restore
#else
        public string GroupName { get; set; }
#endif
        /// <summary>Number of points available for the assignment</summary>
        public int? PointsAvailable { get; set; }
        /// <summary>Number of points awarded to the student</summary>
        public int? PointsAwarded { get; set; }
        /// <summary>Roster identifier of the student</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RosterIdentifier { get; set; }
#nullable restore
#else
        public string RosterIdentifier { get; set; }
#endif
        /// <summary>URL of the starter code for the assignment</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StarterCodeUrl { get; set; }
#nullable restore
#else
        public string StarterCodeUrl { get; set; }
#endif
        /// <summary>Name of the student&apos;s assignment repository</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StudentRepositoryName { get; set; }
#nullable restore
#else
        public string StudentRepositoryName { get; set; }
#endif
        /// <summary>URL of the student&apos;s assignment repository</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StudentRepositoryUrl { get; set; }
#nullable restore
#else
        public string StudentRepositoryUrl { get; set; }
#endif
        /// <summary>Timestamp of the student&apos;s assignment submission</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubmissionTimestamp { get; set; }
#nullable restore
#else
        public string SubmissionTimestamp { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.ClassroomAssignmentGrade"/> and sets the default values.
        /// </summary>
        public ClassroomAssignmentGrade()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.ClassroomAssignmentGrade"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.ClassroomAssignmentGrade CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.ClassroomAssignmentGrade();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "assignment_name", n => { AssignmentName = n.GetStringValue(); } },
                { "assignment_url", n => { AssignmentUrl = n.GetStringValue(); } },
                { "github_username", n => { GithubUsername = n.GetStringValue(); } },
                { "group_name", n => { GroupName = n.GetStringValue(); } },
                { "points_available", n => { PointsAvailable = n.GetIntValue(); } },
                { "points_awarded", n => { PointsAwarded = n.GetIntValue(); } },
                { "roster_identifier", n => { RosterIdentifier = n.GetStringValue(); } },
                { "starter_code_url", n => { StarterCodeUrl = n.GetStringValue(); } },
                { "student_repository_name", n => { StudentRepositoryName = n.GetStringValue(); } },
                { "student_repository_url", n => { StudentRepositoryUrl = n.GetStringValue(); } },
                { "submission_timestamp", n => { SubmissionTimestamp = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("assignment_name", AssignmentName);
            writer.WriteStringValue("assignment_url", AssignmentUrl);
            writer.WriteStringValue("github_username", GithubUsername);
            writer.WriteStringValue("group_name", GroupName);
            writer.WriteIntValue("points_available", PointsAvailable);
            writer.WriteIntValue("points_awarded", PointsAwarded);
            writer.WriteStringValue("roster_identifier", RosterIdentifier);
            writer.WriteStringValue("starter_code_url", StarterCodeUrl);
            writer.WriteStringValue("student_repository_name", StudentRepositoryName);
            writer.WriteStringValue("student_repository_url", StudentRepositoryUrl);
            writer.WriteStringValue("submission_timestamp", SubmissionTimestamp);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
