// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    /// <summary>
    /// Organization Invitation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    public partial class OrganizationInvitation : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The created_at property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; set; }
#nullable restore
#else
        public string CreatedAt { get; set; }
#endif
        /// <summary>The email property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>The failed_at property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FailedAt { get; set; }
#nullable restore
#else
        public string FailedAt { get; set; }
#endif
        /// <summary>The failed_reason property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FailedReason { get; set; }
#nullable restore
#else
        public string FailedReason { get; set; }
#endif
        /// <summary>The id property</summary>
        public long? Id { get; set; }
        /// <summary>The invitation_source property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InvitationSource { get; set; }
#nullable restore
#else
        public string InvitationSource { get; set; }
#endif
        /// <summary>The invitation_teams_url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InvitationTeamsUrl { get; set; }
#nullable restore
#else
        public string InvitationTeamsUrl { get; set; }
#endif
        /// <summary>A GitHub user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.SimpleUser? Inviter { get; set; }
#nullable restore
#else
        public global::GitHub.Models.SimpleUser Inviter { get; set; }
#endif
        /// <summary>The login property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Login { get; set; }
#nullable restore
#else
        public string Login { get; set; }
#endif
        /// <summary>The node_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NodeId { get; set; }
#nullable restore
#else
        public string NodeId { get; set; }
#endif
        /// <summary>The role property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Role { get; set; }
#nullable restore
#else
        public string Role { get; set; }
#endif
        /// <summary>The team_count property</summary>
        public int? TeamCount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.OrganizationInvitation"/> and sets the default values.
        /// </summary>
        public OrganizationInvitation()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.OrganizationInvitation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.OrganizationInvitation CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.OrganizationInvitation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "created_at", n => { CreatedAt = n.GetStringValue(); } },
                { "email", n => { Email = n.GetStringValue(); } },
                { "failed_at", n => { FailedAt = n.GetStringValue(); } },
                { "failed_reason", n => { FailedReason = n.GetStringValue(); } },
                { "id", n => { Id = n.GetLongValue(); } },
                { "invitation_source", n => { InvitationSource = n.GetStringValue(); } },
                { "invitation_teams_url", n => { InvitationTeamsUrl = n.GetStringValue(); } },
                { "inviter", n => { Inviter = n.GetObjectValue<global::GitHub.Models.SimpleUser>(global::GitHub.Models.SimpleUser.CreateFromDiscriminatorValue); } },
                { "login", n => { Login = n.GetStringValue(); } },
                { "node_id", n => { NodeId = n.GetStringValue(); } },
                { "role", n => { Role = n.GetStringValue(); } },
                { "team_count", n => { TeamCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("created_at", CreatedAt);
            writer.WriteStringValue("email", Email);
            writer.WriteStringValue("failed_at", FailedAt);
            writer.WriteStringValue("failed_reason", FailedReason);
            writer.WriteLongValue("id", Id);
            writer.WriteStringValue("invitation_source", InvitationSource);
            writer.WriteStringValue("invitation_teams_url", InvitationTeamsUrl);
            writer.WriteObjectValue<global::GitHub.Models.SimpleUser>("inviter", Inviter);
            writer.WriteStringValue("login", Login);
            writer.WriteStringValue("node_id", NodeId);
            writer.WriteStringValue("role", Role);
            writer.WriteIntValue("team_count", TeamCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
