// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    /// <summary>
    /// A set of rules to apply when specified conditions are met.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    public partial class RepositoryRuleset : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The actors that can bypass the rules in this ruleset</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.RepositoryRulesetBypassActor>? BypassActors { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.RepositoryRulesetBypassActor> BypassActors { get; set; }
#endif
        /// <summary>The conditions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleset.RepositoryRuleset_conditions? Conditions { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleset.RepositoryRuleset_conditions Conditions { get; set; }
#endif
        /// <summary>The created_at property</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The bypass type of the user making the API request for this ruleset. This field is only returned whenquerying the repository-level endpoint.</summary>
        public global::GitHub.Models.RepositoryRuleset_current_user_can_bypass? CurrentUserCanBypass { get; set; }
        /// <summary>The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).</summary>
        public global::GitHub.Models.RepositoryRuleEnforcement? Enforcement { get; set; }
        /// <summary>The ID of the ruleset</summary>
        public int? Id { get; set; }
        /// <summary>The _links property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.RepositoryRuleset__links? Links { get; set; }
#nullable restore
#else
        public global::GitHub.Models.RepositoryRuleset__links Links { get; set; }
#endif
        /// <summary>The name of the ruleset</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The node_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NodeId { get; set; }
#nullable restore
#else
        public string NodeId { get; set; }
#endif
        /// <summary>The rules property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.RepositoryRule>? Rules { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.RepositoryRule> Rules { get; set; }
#endif
        /// <summary>The name of the source</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Source { get; set; }
#nullable restore
#else
        public string Source { get; set; }
#endif
        /// <summary>The type of the source of the ruleset</summary>
        public global::GitHub.Models.RepositoryRuleset_source_type? SourceType { get; set; }
        /// <summary>The target of the ruleset&gt; [!NOTE]&gt; The `push` target is in beta and is subject to change.</summary>
        public global::GitHub.Models.RepositoryRuleset_target? Target { get; set; }
        /// <summary>The updated_at property</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.RepositoryRuleset"/> and sets the default values.
        /// </summary>
        public RepositoryRuleset()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.RepositoryRuleset"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.RepositoryRuleset CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.RepositoryRuleset();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bypass_actors", n => { BypassActors = n.GetCollectionOfObjectValues<global::GitHub.Models.RepositoryRulesetBypassActor>(global::GitHub.Models.RepositoryRulesetBypassActor.CreateFromDiscriminatorValue)?.AsList(); } },
                { "conditions", n => { Conditions = n.GetObjectValue<global::GitHub.Models.RepositoryRuleset.RepositoryRuleset_conditions>(global::GitHub.Models.RepositoryRuleset.RepositoryRuleset_conditions.CreateFromDiscriminatorValue); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "current_user_can_bypass", n => { CurrentUserCanBypass = n.GetEnumValue<global::GitHub.Models.RepositoryRuleset_current_user_can_bypass>(); } },
                { "enforcement", n => { Enforcement = n.GetEnumValue<global::GitHub.Models.RepositoryRuleEnforcement>(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "_links", n => { Links = n.GetObjectValue<global::GitHub.Models.RepositoryRuleset__links>(global::GitHub.Models.RepositoryRuleset__links.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "node_id", n => { NodeId = n.GetStringValue(); } },
                { "rules", n => { Rules = n.GetCollectionOfObjectValues<global::GitHub.Models.RepositoryRule>(global::GitHub.Models.RepositoryRule.CreateFromDiscriminatorValue)?.AsList(); } },
                { "source", n => { Source = n.GetStringValue(); } },
                { "source_type", n => { SourceType = n.GetEnumValue<global::GitHub.Models.RepositoryRuleset_source_type>(); } },
                { "target", n => { Target = n.GetEnumValue<global::GitHub.Models.RepositoryRuleset_target>(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::GitHub.Models.RepositoryRulesetBypassActor>("bypass_actors", BypassActors);
            writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleset.RepositoryRuleset_conditions>("conditions", Conditions);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteEnumValue<global::GitHub.Models.RepositoryRuleset_current_user_can_bypass>("current_user_can_bypass", CurrentUserCanBypass);
            writer.WriteEnumValue<global::GitHub.Models.RepositoryRuleEnforcement>("enforcement", Enforcement);
            writer.WriteIntValue("id", Id);
            writer.WriteObjectValue<global::GitHub.Models.RepositoryRuleset__links>("_links", Links);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("node_id", NodeId);
            writer.WriteCollectionOfObjectValues<global::GitHub.Models.RepositoryRule>("rules", Rules);
            writer.WriteStringValue("source", Source);
            writer.WriteEnumValue<global::GitHub.Models.RepositoryRuleset_source_type>("source_type", SourceType);
            writer.WriteEnumValue<global::GitHub.Models.RepositoryRuleset_target>("target", Target);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::GitHub.Models.OrgRulesetConditions"/>, <see cref="global::GitHub.Models.RepositoryRulesetConditions"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
        public partial class RepositoryRuleset_conditions : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::GitHub.Models.OrgRulesetConditions"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::GitHub.Models.OrgRulesetConditions? OrgRulesetConditions { get; set; }
#nullable restore
#else
            public global::GitHub.Models.OrgRulesetConditions OrgRulesetConditions { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::GitHub.Models.RepositoryRulesetConditions"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::GitHub.Models.RepositoryRulesetConditions? RepositoryRulesetConditions { get; set; }
#nullable restore
#else
            public global::GitHub.Models.RepositoryRulesetConditions RepositoryRulesetConditions { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::GitHub.Models.RepositoryRuleset.RepositoryRuleset_conditions"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::GitHub.Models.RepositoryRuleset.RepositoryRuleset_conditions CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::GitHub.Models.RepositoryRuleset.RepositoryRuleset_conditions();
                result.OrgRulesetConditions = new global::GitHub.Models.OrgRulesetConditions();
                result.RepositoryRulesetConditions = new global::GitHub.Models.RepositoryRulesetConditions();
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(OrgRulesetConditions != null || RepositoryRulesetConditions != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(OrgRulesetConditions, RepositoryRulesetConditions);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                writer.WriteObjectValue<global::GitHub.Models.OrgRulesetConditions>(null, OrgRulesetConditions, RepositoryRulesetConditions);
            }
        }
    }
}
