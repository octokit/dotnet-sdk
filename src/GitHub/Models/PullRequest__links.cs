// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    #pragma warning disable CS1591
    public partial class PullRequest__links : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Hypermedia Link</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.Link? Comments { get; set; }
#nullable restore
#else
        public global::GitHub.Models.Link Comments { get; set; }
#endif
        /// <summary>Hypermedia Link</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.Link? Commits { get; set; }
#nullable restore
#else
        public global::GitHub.Models.Link Commits { get; set; }
#endif
        /// <summary>Hypermedia Link</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.Link? Html { get; set; }
#nullable restore
#else
        public global::GitHub.Models.Link Html { get; set; }
#endif
        /// <summary>Hypermedia Link</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.Link? Issue { get; set; }
#nullable restore
#else
        public global::GitHub.Models.Link Issue { get; set; }
#endif
        /// <summary>Hypermedia Link</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.Link? ReviewComment { get; set; }
#nullable restore
#else
        public global::GitHub.Models.Link ReviewComment { get; set; }
#endif
        /// <summary>Hypermedia Link</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.Link? ReviewComments { get; set; }
#nullable restore
#else
        public global::GitHub.Models.Link ReviewComments { get; set; }
#endif
        /// <summary>Hypermedia Link</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.Link? Self { get; set; }
#nullable restore
#else
        public global::GitHub.Models.Link Self { get; set; }
#endif
        /// <summary>Hypermedia Link</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.Link? Statuses { get; set; }
#nullable restore
#else
        public global::GitHub.Models.Link Statuses { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.PullRequest__links"/> and sets the default values.
        /// </summary>
        public PullRequest__links()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.PullRequest__links"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.PullRequest__links CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.PullRequest__links();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "comments", n => { Comments = n.GetObjectValue<global::GitHub.Models.Link>(global::GitHub.Models.Link.CreateFromDiscriminatorValue); } },
                { "commits", n => { Commits = n.GetObjectValue<global::GitHub.Models.Link>(global::GitHub.Models.Link.CreateFromDiscriminatorValue); } },
                { "html", n => { Html = n.GetObjectValue<global::GitHub.Models.Link>(global::GitHub.Models.Link.CreateFromDiscriminatorValue); } },
                { "issue", n => { Issue = n.GetObjectValue<global::GitHub.Models.Link>(global::GitHub.Models.Link.CreateFromDiscriminatorValue); } },
                { "review_comment", n => { ReviewComment = n.GetObjectValue<global::GitHub.Models.Link>(global::GitHub.Models.Link.CreateFromDiscriminatorValue); } },
                { "review_comments", n => { ReviewComments = n.GetObjectValue<global::GitHub.Models.Link>(global::GitHub.Models.Link.CreateFromDiscriminatorValue); } },
                { "self", n => { Self = n.GetObjectValue<global::GitHub.Models.Link>(global::GitHub.Models.Link.CreateFromDiscriminatorValue); } },
                { "statuses", n => { Statuses = n.GetObjectValue<global::GitHub.Models.Link>(global::GitHub.Models.Link.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::GitHub.Models.Link>("comments", Comments);
            writer.WriteObjectValue<global::GitHub.Models.Link>("commits", Commits);
            writer.WriteObjectValue<global::GitHub.Models.Link>("html", Html);
            writer.WriteObjectValue<global::GitHub.Models.Link>("issue", Issue);
            writer.WriteObjectValue<global::GitHub.Models.Link>("review_comment", ReviewComment);
            writer.WriteObjectValue<global::GitHub.Models.Link>("review_comments", ReviewComments);
            writer.WriteObjectValue<global::GitHub.Models.Link>("self", Self);
            writer.WriteObjectValue<global::GitHub.Models.Link>("statuses", Statuses);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
