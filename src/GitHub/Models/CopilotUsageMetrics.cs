// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    /// <summary>
    /// Summary of Copilot usage.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    public partial class CopilotUsageMetrics : IParsable
    {
        /// <summary>Breakdown of Copilot code completions usage by language and editor</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.CopilotUsageMetrics_breakdown>? Breakdown { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.CopilotUsageMetrics_breakdown> Breakdown { get; set; }
#endif
        /// <summary>The date for which the usage metrics are reported, in `YYYY-MM-DD` format.</summary>
        public Date? Day { get; set; }
        /// <summary>The total number of Copilot code completion suggestions accepted by users.</summary>
        public int? TotalAcceptancesCount { get; set; }
        /// <summary>The total number of users who interacted with Copilot Chat in the IDE during the day specified.</summary>
        public int? TotalActiveChatUsers { get; set; }
        /// <summary>The total number of users who were shown Copilot code completion suggestions during the day specified.</summary>
        public int? TotalActiveUsers { get; set; }
        /// <summary>The total instances of users who accepted code suggested by Copilot Chat in the IDE (panel and inline).</summary>
        public int? TotalChatAcceptances { get; set; }
        /// <summary>The total number of chat turns (prompt and response pairs) sent between users and Copilot Chat in the IDE.</summary>
        public int? TotalChatTurns { get; set; }
        /// <summary>The total number of lines of code completions accepted by users.</summary>
        public int? TotalLinesAccepted { get; set; }
        /// <summary>The total number of lines of code completions suggested by Copilot.</summary>
        public int? TotalLinesSuggested { get; set; }
        /// <summary>The total number of Copilot code completion suggestions shown to users.</summary>
        public int? TotalSuggestionsCount { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.CopilotUsageMetrics"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.CopilotUsageMetrics CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.CopilotUsageMetrics();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "breakdown", n => { Breakdown = n.GetCollectionOfObjectValues<global::GitHub.Models.CopilotUsageMetrics_breakdown>(global::GitHub.Models.CopilotUsageMetrics_breakdown.CreateFromDiscriminatorValue)?.AsList(); } },
                { "day", n => { Day = n.GetDateValue(); } },
                { "total_acceptances_count", n => { TotalAcceptancesCount = n.GetIntValue(); } },
                { "total_active_chat_users", n => { TotalActiveChatUsers = n.GetIntValue(); } },
                { "total_active_users", n => { TotalActiveUsers = n.GetIntValue(); } },
                { "total_chat_acceptances", n => { TotalChatAcceptances = n.GetIntValue(); } },
                { "total_chat_turns", n => { TotalChatTurns = n.GetIntValue(); } },
                { "total_lines_accepted", n => { TotalLinesAccepted = n.GetIntValue(); } },
                { "total_lines_suggested", n => { TotalLinesSuggested = n.GetIntValue(); } },
                { "total_suggestions_count", n => { TotalSuggestionsCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::GitHub.Models.CopilotUsageMetrics_breakdown>("breakdown", Breakdown);
            writer.WriteDateValue("day", Day);
            writer.WriteIntValue("total_acceptances_count", TotalAcceptancesCount);
            writer.WriteIntValue("total_active_chat_users", TotalActiveChatUsers);
            writer.WriteIntValue("total_active_users", TotalActiveUsers);
            writer.WriteIntValue("total_chat_acceptances", TotalChatAcceptances);
            writer.WriteIntValue("total_chat_turns", TotalChatTurns);
            writer.WriteIntValue("total_lines_accepted", TotalLinesAccepted);
            writer.WriteIntValue("total_lines_suggested", TotalLinesSuggested);
            writer.WriteIntValue("total_suggestions_count", TotalSuggestionsCount);
        }
    }
}
