// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    /// <summary>
    /// A run of a CodeQL query against one or more repositories.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    public partial class CodeScanningVariantAnalysis : IAdditionalDataHolder, IParsable
    {
        /// <summary>The GitHub Actions workflow run used to execute this variant analysis. This is only available if the workflow run has started.</summary>
        public int? ActionsWorkflowRunId { get; set; }
        /// <summary>A GitHub user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.SimpleUser? Actor { get; set; }
#nullable restore
#else
        public global::GitHub.Models.SimpleUser Actor { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The date and time at which the variant analysis was completed, in ISO 8601 format&apos;:&apos; YYYY-MM-DDTHH:MM:SSZ. Will be null if the variant analysis has not yet completed or this information is not available.</summary>
        public DateTimeOffset? CompletedAt { get; set; }
        /// <summary>A GitHub repository.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.SimpleRepository? ControllerRepo { get; set; }
#nullable restore
#else
        public global::GitHub.Models.SimpleRepository ControllerRepo { get; set; }
#endif
        /// <summary>The date and time at which the variant analysis was created, in ISO 8601 format&apos;:&apos; YYYY-MM-DDTHH:MM:SSZ.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The reason for a failure of the variant analysis. This is only available if the variant analysis has failed.</summary>
        public global::GitHub.Models.CodeScanningVariantAnalysis_failure_reason? FailureReason { get; set; }
        /// <summary>The ID of the variant analysis.</summary>
        public int? Id { get; set; }
        /// <summary>The language targeted by the CodeQL query</summary>
        public global::GitHub.Models.CodeScanningVariantAnalysisLanguage? QueryLanguage { get; set; }
        /// <summary>The download url for the query pack.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? QueryPackUrl { get; set; }
#nullable restore
#else
        public string QueryPackUrl { get; set; }
#endif
        /// <summary>The scanned_repositories property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::GitHub.Models.CodeScanningVariantAnalysis_scanned_repositories>? ScannedRepositories { get; set; }
#nullable restore
#else
        public List<global::GitHub.Models.CodeScanningVariantAnalysis_scanned_repositories> ScannedRepositories { get; set; }
#endif
        /// <summary>Information about repositories that were skipped from processing. This information is only available to the user that initiated the variant analysis.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::GitHub.Models.CodeScanningVariantAnalysis_skipped_repositories? SkippedRepositories { get; set; }
#nullable restore
#else
        public global::GitHub.Models.CodeScanningVariantAnalysis_skipped_repositories SkippedRepositories { get; set; }
#endif
        /// <summary>The status property</summary>
        public global::GitHub.Models.CodeScanningVariantAnalysis_status? Status { get; set; }
        /// <summary>The date and time at which the variant analysis was last updated, in ISO 8601 format&apos;:&apos; YYYY-MM-DDTHH:MM:SSZ.</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.CodeScanningVariantAnalysis"/> and sets the default values.
        /// </summary>
        public CodeScanningVariantAnalysis()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.CodeScanningVariantAnalysis"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.CodeScanningVariantAnalysis CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.CodeScanningVariantAnalysis();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "actions_workflow_run_id", n => { ActionsWorkflowRunId = n.GetIntValue(); } },
                { "actor", n => { Actor = n.GetObjectValue<global::GitHub.Models.SimpleUser>(global::GitHub.Models.SimpleUser.CreateFromDiscriminatorValue); } },
                { "completed_at", n => { CompletedAt = n.GetDateTimeOffsetValue(); } },
                { "controller_repo", n => { ControllerRepo = n.GetObjectValue<global::GitHub.Models.SimpleRepository>(global::GitHub.Models.SimpleRepository.CreateFromDiscriminatorValue); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "failure_reason", n => { FailureReason = n.GetEnumValue<global::GitHub.Models.CodeScanningVariantAnalysis_failure_reason>(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "query_language", n => { QueryLanguage = n.GetEnumValue<global::GitHub.Models.CodeScanningVariantAnalysisLanguage>(); } },
                { "query_pack_url", n => { QueryPackUrl = n.GetStringValue(); } },
                { "scanned_repositories", n => { ScannedRepositories = n.GetCollectionOfObjectValues<global::GitHub.Models.CodeScanningVariantAnalysis_scanned_repositories>(global::GitHub.Models.CodeScanningVariantAnalysis_scanned_repositories.CreateFromDiscriminatorValue)?.AsList(); } },
                { "skipped_repositories", n => { SkippedRepositories = n.GetObjectValue<global::GitHub.Models.CodeScanningVariantAnalysis_skipped_repositories>(global::GitHub.Models.CodeScanningVariantAnalysis_skipped_repositories.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetEnumValue<global::GitHub.Models.CodeScanningVariantAnalysis_status>(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("actions_workflow_run_id", ActionsWorkflowRunId);
            writer.WriteObjectValue<global::GitHub.Models.SimpleUser>("actor", Actor);
            writer.WriteDateTimeOffsetValue("completed_at", CompletedAt);
            writer.WriteObjectValue<global::GitHub.Models.SimpleRepository>("controller_repo", ControllerRepo);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteEnumValue<global::GitHub.Models.CodeScanningVariantAnalysis_failure_reason>("failure_reason", FailureReason);
            writer.WriteIntValue("id", Id);
            writer.WriteEnumValue<global::GitHub.Models.CodeScanningVariantAnalysisLanguage>("query_language", QueryLanguage);
            writer.WriteStringValue("query_pack_url", QueryPackUrl);
            writer.WriteCollectionOfObjectValues<global::GitHub.Models.CodeScanningVariantAnalysis_scanned_repositories>("scanned_repositories", ScannedRepositories);
            writer.WriteObjectValue<global::GitHub.Models.CodeScanningVariantAnalysis_skipped_repositories>("skipped_repositories", SkippedRepositories);
            writer.WriteEnumValue<global::GitHub.Models.CodeScanningVariantAnalysis_status>("status", Status);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
